apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  generateName: ra2ce-ptk-
  annotations:
    title: RA2CE PTK
    description: PTK - RA2CE - PTK
spec:
  entrypoint: complete
  serviceAccountName: test
  imagePullSecrets:
    - name: regcred

  templates:
    - name: complete
      steps:
      - - name: ptk-preprocessing
          template: ptk-preprocessing
      - - name: read-models
          template: read-models
      - - name: ra2ce
          template: ra2ce
          arguments:
            parameters:
            - name: model
              value: "{{item}}"
          withParam: "{{steps.read-models.outputs.result}}"
      - - name: ptk-analyse
          template: ptk-analyse

    - name: only-ptk
      steps:
      - - name: ptk
          template: ptk-preprocessing

    - name: ptk-preprocessing
      nodeSelector:
        kubernetes.io/os: windows
      tolerations:
        - key: os
          operator: Equal
          value: windows
          effect: NoSchedule
      container:
        image: deltares/ptk:2-3-6
        command:
          - 'powershell'
        # args:
        #   - Start-Sleep -Seconds 1000
        args:
          - aws s3 sync s3://bucket-deltares-et/RA2CE-PTK c:/data/RA2CE-PTK; & cd C:\data\RA2CE-PTK\PTK_Cloud; & cmd /c 'C:\Program Files (x86)\Deltares\Probabilistic toolkit\Deltares.Probabilistic.Console.exe' model_unc_ra2ce.tkx; & aws s3 sync c:/data/RA2CE-PTK s3://bucket-deltares-et/RA2CE-PTK;

    - name: ptk-analyse
      nodeSelector:
        kubernetes.io/os: windows
      tolerations:
        - key: os
          operator: Equal
          value: windows
          effect: NoSchedule
      container:
        image: deltares/ptk:2-3-6
        command:
          - 'powershell'
        # args:
        #   - Start-Sleep -Seconds 1000
        args:
          - aws s3 sync s3://bucket-deltares-et/RA2CE-PTK c:/data/RA2CE-PTK; & cd C:\data\RA2CE-PTK\PTK_Cloud; & cmd /c 'C:\Program Files (x86)\Deltares\Probabilistic toolkit\Deltares.Probabilistic.Console.exe' -performed model_unc_ra2ce.tkx; & aws s3 sync c:/data/RA2CE-PTK s3://bucket-deltares-et/RA2CE-PTK;

    - name: ra2ce
      nodeSelector:
        spot: "true"
      inputs:
        parameters:
        - name: model
        artifacts:
        - name: model-input
          s3:
            bucket: bucket-deltares-et
            endpoint: s3.amazonaws.com
            key: "RA2CE-PTK/Ra2ce/KBN2_losses/{{inputs.parameters.model}}"
          archive:
            none: {}
          path: /data
        - name: static
          s3:
            bucket: bucket-deltares-et
            endpoint: s3.amazonaws.com
            key: "RA2CE-PTK/Ra2ce/KBN2_losses/static"
          archive:
            none: {}
          path: /static
      outputs:
        artifacts:
        - name: model-output
          s3:
            bucket: bucket-deltares-et
            endpoint: s3.amazonaws.com
            key: "RA2CE-PTK/Ra2ce/KBN2_losses/{{inputs.parameters.model}}/output"
          archive:
            none: {}
          path: /data/output
      container:
        imagePullPolicy: Always
        image: deltares/ra2ce
        # command:
        #   - sleep
        # args:
        #   - "1000"
        command:
          - python
        args:
          - run_with_args.py
          - /data/network.ini
          - /data/analyses.ini

      # Read all ra2ce input folders
    - name: read-models
      nodeSelector:
        kubernetes.io/os: linux
      script:
        image: "deltares/boto3:0.0.1"
        command: [python]
        source: |
          from itertools import chain
          from json import dumps
          from functools import reduce
          import boto3
          bucket = 'bucket-deltares-et'
          prefix = 'RA2CE-PTK/Ra2ce/KBN2_losses/'
          exclude = ["data", "static"]
          client = boto3.client('s3')
          paginator = client.get_paginator("list_objects")
          it = paginator.paginate(Bucket=bucket, Prefix=prefix, Delimiter="/")
          def get_prefix(res, p):
              prefix = p["Prefix"].split("/")[-2]
              if prefix not in exclude:
                  res += [prefix]
              return res
          result = list(reduce(
              get_prefix,
              chain.from_iterable(map(lambda i: i["CommonPrefixes"], it)),
              []
          ))
          print(dumps(result))

